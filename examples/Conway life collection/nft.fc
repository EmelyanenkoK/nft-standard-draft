;;
;;  TON NFT Smart Contract
;;

int equal_slices (slice s1, slice s2) asm "SDEQ";
int slice_null?(slice c) asm "ISNULL";

int notification::ownership_assigned() asm "0x11 PUSHINT";
int notification::editorship_assigned() asm "0x14 PUSHINT";

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection
;;  MsgAddressInt owner
;;  MsgAddressInt editor
;;  cell content
;;
;;

_ load_data() impure {
    slice ds = get_data().begin_parse();
    var (index, collection) = (ds~load_uint(64),ds~load_msg_addr());
    if(ds.slice_bits() > 0 ) {
      return (-1, index, collection, ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref() );
    } else {
      return (0, index, collection, null(), null(), null());
    }
}

() store_data(var ds) impure {
    (int index, slice collection, slice owner, slice editor, cell content) = ds;
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection)
            .store_slice(owner)
            .store_slice(editor)
            .store_ref(content)
            .end_cell()
    );
}

() notify (slice to, int op, int amount, int query_id, slice data1, slice payload) impure inline {
  if to.preload_uint(2) == 0 { ;; addr_none: 00
    return ();
  }
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce
    .store_slice(to)
    .store_grams(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);
  if (data1.slice_null?()) {
    msg = msg.store_slice(data1);
  }
  if (payload.slice_null?()) {
    msg = msg.store_slice(payload);
  }
  return send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors
}

() transfer_ownership (slice sender, int query_id, slice msg_body) impure {
    slice new_owner = msg_body~load_msg_addr();
    (int init, int index, slice collection, slice owner, slice editor, cell content) = load_data();
    throw_unless(401, equal_slices(sender, owner));
    store_data(index, collection, new_owner, editor, content);
    raw_reserve(50000000, 2);
    int forward_amount = msg_body~load_grams();
    slice payload = msg_body;
    if forward_amount {
      notify(new_owner, notification::ownership_assigned(), forward_amount, query_id, owner, payload);
    }
}

() after_code_upgrade(slice data, int query_id) impure {
} 

() edit (slice sender, int query_id, slice msg_body) impure {
  (int init, int index, slice collection, slice owner, slice editor, cell content) = load_data();
  throw_unless(401, equal_slices(sender, editor));
  int op = msg_body~load_uint(8);
  if op == 0 {
    content = msg_body~load_ref();
  }
  if op == 1 { ;; transfer editorship
    slice new_editor = msg_body~load_msg_addr();
    int forward_amount = msg_body~load_grams();
    slice payload = msg_body;
    if forward_amount {
      notify(new_editor, notification::editorship_assigned(), forward_amount, query_id, editor, payload);
    }
    editor = new_editor;
  }
  if op == 2 {
    cell new_code = msg_body~load_ref();
    set_code(new_code);
    if(msg_body.slice_refs() > 0) {
      slice post_process = msg_body~load_ref().begin_parse();
      set_c3(new_code.begin_parse().bless());
      after_code_upgrade(post_process, query_id);
      throw(0);
    }
  }
  store_data(index, collection, owner, editor, content);
}

() recv_internal(int smc_balance, int msg_value, cell msg, slice msg_body) {
    if (msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = msg.begin_parse();
    int flags = cs~load_uint(4);

    ;; ignore all bounced messages
    if (flags & 1) {
        return ();
    }

    var data = load_data();
    (int init?, int index, slice collection, _, _, _) = load_data();
    slice sender_address = cs~load_msg_addr();
    if ~ init? {
      if equal_slices(collection, sender_address) {
        return store_data(index, collection, msg_body~load_msg_addr(), msg_body~load_msg_addr(), msg_body~load_ref());
      } else {
        ;; attempt to deploy from wrong address
        var msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(collection)
          .store_grams(0)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1);
        return send_raw_message(msg.end_cell(), 32 + 128);
      }
    }

    int op = msg_body~load_uint(32);

    int query_id = msg_body~load_uint(64);
    if (op == 1) { ;; transfer ownership
      return transfer_ownership(sender_address, query_id, msg_body);
    }
    if (op == 2) { ;; edit
      ;; Do not allow editor to withdraw funds
      raw_reserve(pair_first(get_balance()) - msg_value , 2);
      return edit(sender_address, query_id, msg_body);
    }
}

() recv_external(slice in_msg) {
}

;;
;;  GET Methods
;;

cell get_name() method_id {
	  (_, _, _, _, _, cell content) = load_data();
	  slice cs = content.begin_parse();
	  return cs~load_ref();
}


(int, int) parse_std_none_addr(slice addr) {
  if(addr.slice_bits() == 2) {
    return (-2,-2);
  } else {
    return addr.parse_std_addr();
  }
}

_ get_nft_data() method_id {
  (int init, int index, slice collection, slice owner, slice editor, cell content) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  cell individual_content =   cs~load_ref(); 
  return (init, index, parse_std_none_addr(collection), parse_std_none_addr(owner), parse_std_none_addr(editor), individual_content);
}
